if ( previsor_pec$resultado[i] <= 307.8) {
previsor_pec$resultado[i] <- previsor_pec$resultado[i] * (1/307.8) * (1/2)
}
else {
previsor_pec$resultado[i] <- previsor_pec$resultado[i] * (1/205.2) * (1/2)
}
}
summary(previsor_plp$resultado)
previsor_plp$KIND <- 1
previsor_pec$KIND <- 2
previsor_first$KIND <- 0
previsor <- rbind(previsor_first, previsor_pec, previsor_plp)
previsor <- select(previsor, -TIPO)
### Testando o modelo
for (i in 1:(ncol(previsor)-1)) {
previsor[,i] <- gsub("Sim", "2", previsor[,i])
previsor[,i] <- gsub("Liberado", "1", previsor[,i])
previsor[,i] <- gsub("Não", "0", previsor[,i])
}
previsor$resultado[previsor$resultado > .99] <- .99
previsor_first <- filter(previsor, TIPO=="PL" | TIPO=="REQ" | TIPO=="MPV" | TIPO=="PDC")
previsor_first <- filter(previsor, TIPO=="PL")
previsor_first$KIND <- 0
head(previsor[previsor$KIND==2,])
write.csv(previsor, "previsto.csv", row.names=FALSE)
# Este banco indica quais orientacoes de votacoes para cada partido e para o governo
library(tidyr)
library(dplyr)
setwd('/var/www/html/vai-passar/previsor/')
source('orientacoes2.R')
# Burga, muda essa pasta
setwd('/var/www/html/vai-passar/previsor/planilhas/')
orientacoes <- read.csv('orientacoes.csv', stringsAsFactors=FALSE, sep=';', header=FALSE)
# Abre o banco
# orientacoes$V5[orientacoes$V5=="Não"] <- 0
# orientacoes$V5[orientacoes$V5=="Sim"] <- 1
# orientacoes$V5[orientacoes$V5=="Liberado"] <- NA
# orientacoes$V5[orientacoes$V5=="Obstrução"] <- NA
# Processa a variável V5
orientacoes$V4[orientacoes$V4=="PmdbPpPtbDem..."] <- "Pmdb|Pp|Ptb|Dem"
orientacoes$V4[orientacoes$V4=="PmdbPpPtbDemPscPhsPen"] <- "Pmdb|Pp|Ptb|Dem|Psc|Phs|Pen"
orientacoes$V4[orientacoes$V4=="PmdbPpPtbDemSdPscPhsPen"] <- "Pmdb|Pp|Ptb|Dem|Sd|Psc|Phs|Pen"
orientacoes$V4[orientacoes$V4=="PmdbPpPtbPscPhsPen"] <- "Pmdb|Pp|Ptb|Psc|Phs|Pen"
orientacoes$V4[orientacoes$V4=="PrbPtnPmnPrpPsdcPrtb"] <- "Prb|Ptn|Pmn|Prp|Psdc|Prtb"
orientacoes$V4[orientacoes$V4=="PrbPtnPmnPrpPsdcPrtbPtcPslPtdoB"] <- "Prb|Ptn|Pmn|Prp|Psdc|Prtb|Ptc|Psl|PtdoB"
orientacoes$V4[orientacoes$V4=="PsdbPsbPpsPv"] <- "Psdb|Psb|Pps|Pv"
orientacoes$V4[orientacoes$V4=="PtPsdPrPdtProsPc"] <- "Psdb|Psb|Pps|Pv"
orientacoes$V4[orientacoes$V4=="Repr.PSL"] <- "PSL"
orientacoes$V4[orientacoes$V4=="Repr.PTC"] <- "PTC"
orientacoes$V4[orientacoes$V4=="Repr.PTdoB"] <- "PTdoB"
orientacoes$V4[orientacoes$V4=="Solidaried"] <- "SD"
orientacoes$V4[orientacoes$V4=="GOV."] <- "Gov"
orientacoes$V4[orientacoes$V4=="Repr.PSOL"] <- "psol"
orientacoes$V4[orientacoes$V4=="PtPsdPrPdtProsPcdob"] <- "Pt|Psd|Pr|Pdt|Pros|Pcdob"
orientacoes$V4[orientacoes$V4=="PsdbPsbPps"] <- "Psdb|Psb|Pps"
# Altera as entradas pra facilitar trabalho
# Estamos separando partidos com '|', para poder separa-los em colunas
# posteriormente
orientacoes$V4 <- tolower(orientacoes$V4)
# transforma partidos tudo para letras minusculas
orientacoes <- orientacoes %>%
transform(V4 = strsplit(V4, "\\|")) %>%
unnest(V4)
# Separa as variaveis
colnames(orientacoes) <- c("ID_VOTACAO", "DATA", "HORA", "ORIENTACAO", "PARTIDO")
# Altera nomes das colunas de "V4" para nomes pertinentes
orientacoes <- orientacoes[!duplicated(orientacoes),]
# Remove valores duplicados
# Obter apenas a orientacao do governo. Para isso, copiamos o df:
orientacoes <- mutate(orientacoes, ORIENTACAO=ifelse(ORIENTACAO=="Obstrução", "Não", ORIENTACAO))
orientacoes <- spread(orientacoes, PARTIDO, ORIENTACAO)
#  orientacoes <- select(orientacoes, ID_VOTACAO, pt, pmdb, psd, pcdob, pdt, prb, pr , pros)
votos <- read.csv("votos.csv", , stringsAsFactors=FALSE, sep=';')
proposicoes <- read.csv("proposicoes.csv", stringsAsFactors=FALSE, sep=';')
conta_sim <- function(x) {
n_sim <- try(table(x)[["SIM"]], TRUE)
return(n_sim)
}
votos <- votos %>%
filter((VOTO=="SIM" | VOTO=="NAO")) %>%
mutate(votos_sim=ifelse(VOTO=="SIM", 1, 0)) %>%
group_by(ID_VOTACAO) %>%
summarise(contagem=n(), votos_sim=sum(votos_sim))
votos <- inner_join(votos, proposicoes)
library(randomForest)
votos <- inner_join(votos,orientacoes, by="ID_VOTACAO")
votos <- select(votos, ID_VOTACAO, contagem, dem, TIPO, gov, minoria, sd,starts_with("p"), resultado=votos_sim)
nome_colunas <- colnames(votos)[2:length(colnames(votos))]
for (i in nome_colunas) {
print(i)
print(sum(is.na(votos[[i]])))
}
# votosn <- inner_join(votos, proposicoes, by="ID_VOTACAO")
# write.csv(votosn, file="orietacoes_e_votacoes.csv", row.names=FALSE)
#Excluindo PSOL, pois possui muitas NAs
# Também vamos excluir ptc, ptdob, pros e sd
votos <- select(votos, -ptc, -ptdob, -pros, -sd)
### Rodando
for (i in colnames(votos)) {
if (i != "resultado" & i !="contagem") {
votos[[i]] <- as.factor(votos[[i]])
}
}
# O modelo é bom
modelo <- randomForest(resultado ~ gov + minoria + pt + pmdb
+ psdb + psd + TIPO,
data=votos, ntree=500)
modelo
varImpPlot(modelo)
### Previsões
vari <- c("Sim", "Não", "Liberado")
varo <- c("Sim", "Não")
vara <- c("MPV", "PDC", "PEC", "PL", "PLP", "REQ", "REC")
previsor <- expand.grid(varo, vari, vari,
vari, vari,  varo, vara)
colnames(previsor) <- c("gov", "minoria",  "pmdb",
"psd", "psdb",  "pt", "TIPO")
previsor <- as.data.frame(previsor, stringsAsFactors=FALSE)
previsor$resultado <- predict(modelo,previsor)
# write.csv(previsor, "previsto2.csv", row.names=FALSE)
## Gera csv com data ultima votação e numero de linhas
### FILTREMOS PECs e PLPs
previsor_pec <- filter(previsor, TIPO=="PEC")
previsor_plp <- filter(previsor, TIPO=="PLP")
previsor_plp$resultado <- previsor_plp$resultado/513
for (i in 1:nrow(previsor_pec)) {
if ( previsor_pec$resultado[i] <= 307.8) {
previsor_pec$resultado[i] <- previsor_pec$resultado[i] * (1/307.8) * (1/2)
}
else {
previsor_pec$resultado[i] <- previsor_pec$resultado[i] * (1/205.2) * (1/2)
}
}
summary(previsor_plp$resultado)
previsor_plp$KIND <- 1
previsor_pec$KIND <- 2
previsor_first$KIND <- 0
previsor <- rbind(previsor_first, previsor_pec, previsor_plp)
previsor <- select(previsor, -TIPO)
### Testando o modelo
for (i in 1:(ncol(previsor)-1)) {
previsor[,i] <- gsub("Sim", "2", previsor[,i])
previsor[,i] <- gsub("Liberado", "1", previsor[,i])
previsor[,i] <- gsub("Não", "0", previsor[,i])
}
previsor$resultado[previsor$resultado > .99] <- .99
previsor_first <- filter(previsor, TIPO=="PL" | TIPO=="REQ" | TIPO=="MPV" | TIPO=="PDC")
previsor_first <- filter(previsor, TIPO=="PL")
previsor_first$KIND <- 0
previsor_first$KIND <- 0
head(previsor[previsor$KIND==2,])
write.csv(previsor, "previsto.csv", row.names=FALSE)
stf <- read.csv('~/Documents/banco-stf/stf.csv', stringsAsFactors=FALSE)
library(tidyr)
str(stf)
stf <- stf %>%
transform(fator_m_aurelio=strsplit(fator_m_aurelio, "#")) %>%
transform(unanimidade=strsplit(unanimidade, "#")) %>%
unnest(fator_m_aurelio, unanimidade)
nrow(stf)
stf_maioria <- filter(stf, unanimidade==0 & fator_m_aurelio==0)
nrow(stf_maioria)
write.csv(stf_maioria, "stf_maioria.csv", row.names=FALSE)
setwd('~/Documents/banco-stf/')
write.csv(stf_maioria, "stf_maioria.csv", row.names=FALSE)
library(tidyr)
library(dplyr)
library(stringr)
# Burga, muda essa pasta
setwd('/var/www/html/vai-passar/previsor/planilhas/')
orientacoes <- read.csv('orientacoes.csv', stringsAsFactors=FALSE, sep=';', header=FALSE)
# Abre o banco
# orientacoes$V5[orientacoes$V5=="Não"] <- 0
# orientacoes$V5[orientacoes$V5=="Sim"] <- 1
# orientacoes$V5[orientacoes$V5=="Liberado"] <- NA
# orientacoes$V5[orientacoes$V5=="Obstrução"] <- NA
# Processa a variável V5
orientacoes$V4[orientacoes$V4=="PmdbPpPtbDem..."] <- "Pmdb|Pp|Ptb|Dem"
orientacoes$V4[orientacoes$V4=="PmdbPpPtbDemPscPhsPen"] <- "Pmdb|Pp|Ptb|Dem|Psc|Phs|Pen"
orientacoes$V4[orientacoes$V4=="PmdbPpPtbDemSdPscPhsPen"] <- "Pmdb|Pp|Ptb|Dem|Sd|Psc|Phs|Pen"
orientacoes$V4[orientacoes$V4=="PmdbPpPtbPscPhsPen"] <- "Pmdb|Pp|Ptb|Psc|Phs|Pen"
orientacoes$V4[orientacoes$V4=="PrbPtnPmnPrpPsdcPrtb"] <- "Prb|Ptn|Pmn|Prp|Psdc|Prtb"
orientacoes$V4[orientacoes$V4=="PrbPtnPmnPrpPsdcPrtbPtcPslPtdoB"] <- "Prb|Ptn|Pmn|Prp|Psdc|Prtb|Ptc|Psl|PtdoB"
orientacoes$V4[orientacoes$V4=="PsdbPsbPpsPv"] <- "Psdb|Psb|Pps|Pv"
orientacoes$V4[orientacoes$V4=="PtPsdPrPdtProsPc"] <- "Psdb|Psb|Pps|Pv"
orientacoes$V4[orientacoes$V4=="Repr.PSL"] <- "PSL"
orientacoes$V4[orientacoes$V4=="Repr.PTC"] <- "PTC"
orientacoes$V4[orientacoes$V4=="Repr.PTdoB"] <- "PTdoB"
orientacoes$V4[orientacoes$V4=="Solidaried"] <- "SD"
orientacoes$V4[orientacoes$V4=="GOV."] <- "Gov"
orientacoes$V4[orientacoes$V4=="Repr.PSOL"] <- "psol"
orientacoes$V4[orientacoes$V4=="PtPsdPrPdtProsPcdob"] <- "Pt|Psd|Pr|Pdt|Pros|Pcdob"
orientacoes$V4[orientacoes$V4=="PsdbPsbPps"] <- "Psdb|Psb|Pps"
# Altera as entradas pra facilitar trabalho
# Estamos separando partidos com '|', para poder separa-los em colunas
# posteriormente
orientacoes$V4 <- tolower(orientacoes$V4)
# transforma partidos tudo para letras minusculas
orientacoes <- orientacoes %>%
transform(V4 = strsplit(V4, "\\|")) %>%
unnest(V4)
# Separa as variaveis
colnames(orientacoes) <- c("ID_VOTACAO", "DATA", "HORA",  "ORIENTACAO","PARTIDO")
# Altera nomes das colunas de "V4" para nomes pertinentes
orientacoes <- orientacoes[!duplicated(orientacoes),]
# Remove valores duplicados
# Obter apenas a orientacao do governo. Para isso, copiamos o df:
orientacoes <- mutate(orientacoes, ORIENTACAO=ifelse(str_detect(ORIENTACAO,"Obstrução"), "Não", ORIENTACAO))
orientacoes <- orientacoes[!duplicated(orientacoes),]
orientacoes <- spread(orientacoes, PARTIDO, ORIENTACAO)
#  orientacoes <- select(orientacoes, ID_VOTACAO, pt, pmdb, psd, pcdob, pdt, prb, pr , pros)
votos <- read.csv("votos.csv", , stringsAsFactors=FALSE, sep=';')
proposicoes <- read.csv("proposicoes.csv", stringsAsFactors=FALSE, sep=';')
conta_sim <- function(x) {
n_sim <- try(table(x)[["SIM"]], TRUE)
return(n_sim)
}
votos <- votos %>%
filter((VOTO=="SIM" | VOTO=="NAO")) %>%
mutate(votos_sim=ifelse(VOTO=="SIM", 1, 0)) %>%
group_by(ID_VOTACAO) %>%
summarise(contagem=n(), votos_sim=sum(votos_sim))
votos <- inner_join(votos, proposicoes)
votos$APROV_numero <- ifelse(votos$votos_sim >= (votos$contagem)/2, 1, 0)
votos$APROV_numero[votos$TIPO=="PEC"] <- ifelse(votos$votos_sim[votos$TIPO=="PEC"] >= 308, 1, 0)
str(votos)
votos <- inner_join(votos,orientacoes, by="ID_VOTACAO")
votos <- filter(votos, TIPO=="MPV")
str(votos)
filter(votos, psd=="Sim" & pmdb=="Sim")
votos <- filter(votos, psd=="Sim" & pmdb=="Sim")
nrow(votos)
table(votos$APROV_numero)
votos <- filter(votos, APROV_numero==0)
votos
install.packages('igraph')
install.packages("igraph")
demo(package="igraph")
install.packages('tcltk')
install.packages('tcltk')
install.packages('tcltk')
install.packages('igraph')
install.packages('dplyr')
install.packages('rgl')
install.packages('ape')
install.packages('igraph')
library(igraph)
lisa_ibope <- read.csv('~/Downloads/Lista_Dep_Twitter_Ibope.csv')
str(lisa_ibope)
lista_ibope <- read.csv('~/Downloads/Lista_Dep_Twitter_Ibope.csv',
sep=';',
stringsAsFactors=FALSE)
str(lista_ibope)
?`%in%`
library(dplyr)
library(tidyr)
library(devtools)
install.packages('devtools')
library(devtools)
install_github('tidyr')
install_github(tidyr)
install_github('hadley/tidyr')
library(tidyr)
lista_ibope <- select(lista_ibope, nome_seguido, nome_deputado)
str(lista_ibope)
deputados <- names(table(lista_ibope$nome_deputado))
lista_ibope <- filter(lista_ibope, nome_seguido %in% nome_deputado)
str(lista_ibope)
write.csv(lista_ibope, "deputados_que_seguem.csv", row.names=FALSE)
getwd()
USArrests
lista_ibope
str(lista_ibope)
lista2$valor <- 1
lista_ibope$valor <- 1
lista2 <- spread(lista_ibope, nome_seguido, valor)
str(lista2)
?mutate_each
lista2 <- mutate_each(lista2, funs(function(x) { return(ifelse(is.na(x), 0, 1)) } ) )
lista2 <- mutate_each(lista2, funs(function(x) { return(ifelse(is.na(x), 0, 1)) } ) )
remove_na  <- function(x) { return(ifelse(is.na(x), 0, 1)) }
remove_na(NA)
remove_na("dunha")
lista2 <- mutate_each(lista2, funs(remove_na))
str(lista2)
?select
row.names(lista2) <- lista2$nome_deputado
lista$nome_deputado
lista2$nome_deputado
lista_ibope$valor <- 1
lista2 <- spread(lista_ibope, nome_seguido, valor)
row.names(lista2) <- lista2$nome_deputado
lista2 <- select(lista2, -nome_deputado )
remove_na  <- function(x) { return(ifelse(is.na(x), 0, x)) }
lista2 <- mutate_each(lista2, funs(remove_na))
str(lista2)
head(lista2)
rownames(lista2)
lista2 <- spread(lista_ibope, nome_seguido, valor)
rownames(lista2) <- lista2$nome_deputado
head(lista2)
lista2 <- select(lista2, -nome_deputado
remove_na  <- function(x) { return(ifelse(is.na(x), 0, x)) }
lista2 <- mutate_each(lista2, funs(remove_na))
lista2 <- select(lista2, -nome_deputado )
remove_na  <- function(x) { return(ifelse(is.na(x), 0, x)) }
lista2 <- mutate_each(lista2, funs(remove_na))
head(lista2)
rownames(lista)
rownames(lista2)
lista2 <- spread(lista_ibope, nome_seguido, valor)
rownames(lista2) <- lista2$nome_deputado
str(lista2)
head(lista2)
lista2 <- select(lista2, -(nome_deputado) )
head(lista2)
remove_na  <- function(x) { return(ifelse(is.na(x), 0, x)) }
lista2 <- mutate_each(lista2, funs(remove_na))
head(lista2)
lista2 <- spread(lista_ibope, nome_seguido, valor)
rownames(lista2) <- lista2$nome_deputado
lista2 <- select(lista2, -(nome_deputado) )
hc <- hclust(dist(lista2), "ave")
nomes <- lista2$nome_deputado
lista2 <- select(lista2, -(nome_deputado) )
lista2 <- spread(lista_ibope, nome_seguido, valor)
nomes <- lista2$nome_deputado
lista2 <- select(lista2, -(nome_deputado) )
remove_na  <- function(x) { return(ifelse(is.na(x), 0, x)) }
lista2 <- mutate_each(lista2, funs(remove_na))
rownames(lista2) <- nomes
head(lista2)
hc <- hclust(dist(lista2), "ave")
plot(hc)
hc
?hc
str(hc)
par(cex=.3)
plot(hc)
par(cex=.5)
plot(hc)
STR(HC)
str(hc)
table(hc$height)
table(hc$merge)
?cutree
plot(hc, hang=-1)
hc <- hclust(dist(lista2), "ward")
par(cex=.5)
plot(hc, hang=-1)
hc <- hclust(dist(lista2), "ward.D")
par(cex=.5)
plot(hc, hang=-1)
str(hc)
table(hc$height)
str(lista_ibope)
lista_ibope <- read.csv('~/Downloads/Lista_Dep_Twitter_Ibope (1).csv',
sep=';',
stringsAsFactors=FALSE)
str(lista_ibope)
?tolower
mutate(lista_ibope, nome_deputado=tolower(nome_deputado), nome_seguido=tolower(nome_seguido))
lista_ibope <- mutate(lista_ibope, nome_deputado=tolower(nome_deputado), nome_seguido=tolower(nome_seguido))
library(dplyr)
library(tidyr)
lista_ibope <- select(lista_ibope, nome_seguido, nome_deputado)
deputados <- names(table(lista_ibope$nome_deputado))
lista_ibope <- filter(lista_ibope, nome_seguido %in% nome_deputado)
write.csv(lista_ibope, "deputados_que_seguem.csv", row.names=FALSE)
library(dplyr)
library(tidyr)
lista_ibope <- select(lista_ibope, nome_seguido, nome_deputado)
deputados <- names(table(lista_ibope$nome_deputado))
lista_ibope <- filter(lista_ibope, nome_seguido %in% nome_deputado)
write.csv(lista_ibope, "deputados_que_seguem.csv", row.names=FALSE)
getwd()
getwd()
?write.csv
write.csv(lista_ibope, "deputados_que_seguem.csv", row.names=FALSE, sep=';')
?matrix
matrix(rep(0 ,20), rep(1,20))
rep(0 ,20)
c(rep(0 ,20), rep(1,20))
matrix(c(rep(0 ,20), rep(1,20)), ncol=1)
cbind(matrix(c(rep(0 ,20), rep(1,20)), ncol=1))
x <- matrix(rep(0, 20), ncol=1)
x <- matrix(rep(0, 20), ncol=1)
for (i in 1:20) {
y <-  matrix(rep(i, 20), rep(1, 20-i), ncol=1)
x <- cbind(x,y)
}
for (i in 1:20) {
y <-  matrix(rep(i, 20), rep(1, 20-i), ncol=1)
print(y)
x <- cbind(x,y)
}
i <- 1
y <-  matrix(rep(i, 20), rep(1, 20-i), ncol=1)
y
y <-  matrix(rep(0, i), rep(1, 20-i), ncol=1)
y
y <-  matrix(rep(0, i), rep(1, (20-i)), ncol=1)
y
x <- matrix(rep(0, 20), ncol=1)
i <- 1
for (i in 1:20) {
y <-  matrix(c(rep(0, i), rep(1, (20-i))), ncol=1)
print(y)
x <- cbind(x,y)
}
x
nrow(x)
ncol(x)
escala <- cmdscale(dist(x))
escala
names(escala)
plot(escala)
escala <- cmdscale(dist(x), eig=TRUE, k=2)
escala
install.packages(c("vegan", "ecodist", "labdsv", "ape", "ade4", "smacof"))
data(breakfast)
library(smacof)
data(breakfast)
breakfast
res.smacof <- smacofSym(x, ndim = 2, type = "interval")
res.perm <- permtest(res.smacof)
plot(res.perm)
res.perm
res.smacof
plot(res.smacof)
mds7 = smacofSym(x, ndim = 2)
plot(mds7)
install.packages('wnominate')
?rollcall
??rollcall
library(pscl)
?rollcall
x
names(x) <- 1:20
rc <- rollcall(x, yea=1, nay=0)
rc
wnominate(rc)
library(wnominate)
wnominate(rc)
?wnominate
wnominate(rc, polarity=0)
wnominate(rc, polarity=(1,10))
wnominate(rc, polarity=c(1,10))
wnominate(rc, polarity=c(1))
wnominate(rc, polarity=c(1, 2))
result<-wnominate(rc,polarity=c(2,5))
rc
result<-wnominate(rc,polarity=c(1,20))
result<-wnominate(rc,polarity=c(1), dims=1)
result<-wnominate(rc,polarity=1, dims=1)
data(sen90)
result<-wnominate(sen90,polarity=c(2,5))
plot(result)
result<-wnominate(rc,polarity=c(2,5))
result<-wnominate(rc,polarity=c(1,2))
result<-wnominate(rc,polarity=c(1,2), dim=1)
result<-wnominate(rc,polarity=0
)
result<-wnominate(rc,polarity=1, dims=1)
result<-wnominate(rc,polarity="1", dims=1)
rc <- rollcall(x, yea=1, nay=0)
x
names(x) <- NA
x
rownames(x) <- 1:20
x
rc <- rollcall(x, yea=1, nay=0)
result<-wnominate(rc,polarity=1, dims=1)
result<-wnominate(rc,polarity=c(1,2), dims=2)
x
colnames(x) <- 1:20
colnames(x) <- 1:21
rc <- rollcall(x, yea=1, nay=0)
result<-wnominate(rc,polarity=c(1,2), dims=2)
result<-wnominate(rc,polarity=c('1','2'), dims=2)
rownames(x) <- c("dunha","moacir", "carlao","roberval", "dizi","emburguer","robson","mariano","fudriga","belezar")
rownames(x) <- c("dunha","moacir", "carlao","roberval", "dizi","emburguer","robson","mariano","fudriga","belezar","chongbon","cheech","chong","drob","drenigo","choritobp","xigondi","luleiro","lopitu","gutyiop")
x
rc <- rollcall(x, yea=1, nay=0)
result<-wnominate(rc,polarity=c("dunha","moacir"), dims=2)
result<-wnominate(rc,polarity="dunha", dims=1)
rc
str(rc)
result<-wnominate(rc,polarity="Legislator 1", dims=1)
result<-wnominate(rc,polarity="Legislator 1", dims=1)
r <- cor(t(x),use="pairwise")
r <- cor(x,use="pairwise")
r
r <- cor(t(x),use="pairwise")
r
x
y <- x[2:nrow(x),]
y
r <- cor(t(y),use="pairwise")
r
table(is.na(r))
e <- eigen(r)
lambda <- e$values
n <- dim(e)[1]
plot(lambda[1:20],
type="b",
las=1,
ylab="Eigenvalues")
abline(h=1)
v <- e$vectors[,1:2]
v
plot(v)
